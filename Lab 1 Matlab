%% 1
%a
A=[ 1 2 3 0; 0 4 5 6; 1 1 -1 0; 1 1 1 1 ];
b=[7 6 5 4]';
x=A\b
%b
r=b-A*x
%c Avrundningsfel av datorn

%% 2
%aRita funktion, lokalisera område för rötter, newton  eller sekantmetoden

%b
syms x
f= @(x) 51*x - ((x.^2+x+0.03)./(2*x+1)).^7 -17*x.*exp(-x);
a=0:0.01:4;
A=-10:0.1:10;
subplot(2,1,1),plot(a,f(a));
grid
xlabel('x')
ylabel('f(x)')
title('x=[0,2]')
subplot(2,1,2),plot(A,f(A))
grid
xlabel('x')
ylabel('f(x)')
title('x=[0,4]')

%% c
clc 
disp('Newton-Raphsons metod')
x=3.5;
t=1;
format short e
disp(' x f(x) fprim(x) korr kvad linj')
while abs(t)>5e-8
f = 51*x - ((x.^2+x+0.03)./(2*x+1)).^7 -17*x.*exp(-x);
fp = (14*(x^2 + x + 3/100)^7)/(2*x + 1)^8 - (7*(x^2 + x + 3/100)^6)/(2*x + 1)^6 - 17*exp(-x) + 17*x*exp(-x) + 51;
g=t;
t=f/fp;
kvad=t/g^2; linj=t/g;
disp([x f fp t kvad linj]);
x=x-t;
end
rot=x

%d
%rot1=6.4324e-13
%rot2=3.7892e+00

%e
%se rad 40
%f
%kvadrat-termen konvergerar mot ett tal
%g
%Metodern körs enligt while-satsen tills felet är mindre än en bestämd
%tolerans. Att relativfelet är tillräckligt litet bestäms av toleransen
%h
% 2 negativa rötter, nära ändpunkterna på intervallet [-1.1:-0.5]


%% 3
clc
disp('Sekantmetoden');
x0=3; x1=4;
g0=1; g1=1;
disp('x f korr konv lin')
disp([x0 f0])
while abs(x1-x0)>5e-8;
    f0=51*x0 - ((x0.^2+x0+0.03)./(2*x0+1)).^7 -17*x0.*exp(-x0);
    f1=51*x1 - ((x1.^2+x1+0.03)./(2*x1+1)).^7 -17*x1.*exp(-x1);
    t=f1*(x1-x0)/(f1-f0);
    k=t/(g1*g0);
    disp([x1 f1 t k ])   
    x0=x1; f0=f1; x1=x1-t;
    g0=g1; g1=t;
end;
rot=x1
%a
%rot1=6.4322e-13
%rot2=3.7892e+00
%b
%Snabb och regelbundenkonvergens(t avtar med storleksordning e-2 per
%iteration), beror på gissningen
%
%c
% Varken eller,enligt teorin är sekantmetoden superlineär,
%d
clc
clear all
       x = [1; 32; 60; 91; 121; 152; 182; 213; 243; 273; 304; 334; 364];
y = [373; 484; 635; 798; 956; 1085; 1104; 996; 841; 682; 523; 394; 373];
%plot(x,y,"x") %polynomet ser ut att vara av grad 2



%punkterna x1 x2 och x3 = 152; 182 och 213


x1=152;
x2=182;
x3=213;

%fel?
a=[1, x1, x1.^2;1, x2, x2.^2;1, x3, x3.^2];
b=[1085; 110; 996];
a\b

%fel?
e=(0:25:400);
p=c1+c2.*e+c3.*e.^2;
plot(e,p)


clc
clear all
x = [1; 32; 60; 91; 121; 152; 182; 213; 243; 273; 304; 334; 365];
y = [373; 484; 635; 798; 956; 1085; 1104; 996; 841; 682; 523; 394; 373];
%plot(x,y,"x") %polynomet ser ut att vara av grad 2



%punkterna x1 x2 och x3 = 152; 182 och 213

x1=152;
x2=182;
x3=213;


A=[1 0 0; 1 30 0; 1 61 1891];
b=[956; 1085; 1104];
c=A\b

c1=c(1)
c2=c(2)
c3=c(3)

p= @(x) c1 + c2.*(x-x1) + c3.*(x-x1).*(x-x2)
plot(x,p(x))

%% 4 e
clc
clear all
format short

xstart = [1; 32; 60; 91; 121; 152; 182; 213; 243; 273; 304; 334; 365]; 
ystart = [373; 484; 635; 798; 956; 1085; 1104; 996; 841; 682; 523; 394; 373]; %alla värden för hela året

x=[91; 121; 152; 182; 213; 243];
y=[798; 956; 1085; 1104; 996; 841];%värden från april till september

a=[1 x(1) x(1)^2
    1 x(2) x(2)^2
    1 x(3) x(3)^2
    1 x(4) x(4)^2
    1 x(5) x(5)^2
    1 x(6) x(6)^2];

at=transpose(a);
mkm=(at*a)\(at*y);
c1=mkm(1);
c2=mkm(2);
c3=mkm(3);

%hitta maxvärde
syms b
p= c1 + c2.*b + c3.*b.^2;
dpdx=diff(p,b)==0;
xmax=solve(dpdx,b);
r=xmax;
ymax= c1 + c2.*r + c3.*r.^2 %ungefär 1095
plot(xmax,ymax,"xb")
hold on



%skriver ut hela mkm-grafen och alla startvärden
p= @(b) c1 + c2.*b + c3.*b.^2;
b=(0:365);
plot(b,p(b))
hold on
plot(xstart,ystart,"or")
hold on

syms b
julafton=358;
b=julafton;
p_jul= c1 + c2.*b + c3.*b.^2
plot(julafton,p_jul,"xb")

%% 4 f
clc
clear all
format short

x = [1; 32; 60; 91; 121; 152; 182; 213; 243; 273; 304; 334; 365]; 
y = [373; 484; 635; 798; 956; 1085; 1104; 996; 841; 682; 523; 394; 373]; %alla värden för hela året


a=[1 x(1) x(1)^2
   1 x(2) x(2)^2
   1 x(3) x(3)^2
   1 x(4) x(4)^2
   1 x(5) x(5)^2
   1 x(6) x(6)^2
   1 x(7) x(7)^2
   1 x(8) x(8)^2
   1 x(9) x(9)^2
   1 x(10) x(10)^2
   1 x(11) x(11)^2
   1 x(12) x(12)^2
   1 x(13) x(13)^2];

at=transpose(a);
mkm=(at*a)\(at*y);
c1=mkm(1);
c2=mkm(2);
c3=mkm(3);

%hitta maxvärde
syms b
p= c1 + c2.*b + c3.*b.^2;
dpdx=diff(p,b)==0;
xmax=solve(dpdx,b);
r=xmax;
ymax= c1 + c2.*r + c3.*r.^2 
plot(xmax,ymax,"xb")
hold on



%skriver ut hela mkm-grafen och alla startvärden

b=(0:365);
p= @(b) c1 + c2.*b + c3.*b.^2;
plot(b,p(b))
hold on
plot(x,y,"or")
hold on

syms b
julafton=358;
b=julafton;
p_jul= c1 + c2.*b + c3.*b.^2
plot(julafton,p_jul,"xb")

%% 1
%a
A=[ 1 2 3 0; 0 4 5 6; 1 1 -1 0; 1 1 1 1 ];
b=[7 6 5 4]';
x=A\b
%b
r=b-A*x
%c Avrundningsfel av datorn

%% 2
%aRita funktion, lokalisera område för rötter, newton  eller sekantmetoden

%b
syms x
f= @(x) 51*x - ((x.^2+x+0.03)./(2*x+1)).^7 -17*x.*exp(-x);
a=0:0.01:4;
A=-1:000.1:0;
subplot(2,1,1),plot(a,f(a));
grid
xlabel('x')
ylabel('f(x)')
title('x=[0,2]')
subplot(2,1,2),plot(A,f(A))
grid
xlabel('x')
ylabel('f(x)')
title('x=[0,4]')

%% c
clc 
disp('Newton-Raphsons metod')
x=3.5;
t=1;
format short e
disp(' x f(x) fprim(x) korr kvad linj')
while abs(t)>5e-8
    f = 51*x - ((x.^2+x+0.03)./(2*x+1)).^7 -17*x.*exp(-x);
    fp = (14*(x^2 + x + 3/100)^7)/(2*x + 1)^8 - (7*(x^2 + x + 3/100)^6)/(2*x + 1)^6 - 17*exp(-x) + 17*x*exp(-x) + 51;
    g=t;
    t=f/fp;
    kvad=t/g^2; linj=t/g;
    disp([x f fp t kvad linj])
    x=x-t;
end;
rot=x

%d
%rot1=6.4324e-13
%rot2=3.7892e+00

%e
%se rad 40
%f
%kvadrat-termen konvergerar mot ett tal
%g
%Metodern körs enligt while-satsen tills felet är mindre än en bestämd
%tolerans. Att relativfelet är tillräckligt litet bestäms av toleransen
%h
% 2 negativa rötter, nära ändpunkterna på intervallet [-1.1:-0.5]


%% 3
clc
disp('Sekantmetoden');
x0=3.5; x1=3.8;
g0=1; g1=1;
disp('x f korr konv lin')
%disp([x0 f0])
error=[]
while abs(x1-x0)>5e-8;
    f0=51*x0 - ((x0.^2+x0+0.03)./(2*x0+1)).^7 -17*x0.*exp(-x0);
    f1=51*x1 - ((x1.^2+x1+0.03)./(2*x1+1)).^7 -17*x1.*exp(-x1);
    t=f1*(x1-x0)/(f1-f0);
    k=t/(g1*g0);
    disp([x1 f1 t k ])   
    x0=x1; f0=f1; x1=x1-t;
    g0=g1; g1=t;
    error = [error, t];
end;
rot=x1
plot(error)
%a
%rot1=6.4322e-13
%rot2=3.7892e+00
%b
%Snabb och regelbundenkonvergens(t avtar med storleksordning e-2 per
%iteration), beror på gissningen
%
%c
% Varken eller,enligt teorin är sekantmetoden superlineär,
%d
